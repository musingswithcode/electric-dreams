---
import imgCircles from './MolnarSquares/images/molnar-squares-circles.png'
import imgEqualOffsets from './MolnarSquares/images/molnar-squares-equal-offsets.png'
import imgOffsetSides from './MolnarSquares/images/molnar-squares-offset-sides.png'
import sketch from './MolnarSquares/sketch.js?raw'
import Teaser from './MolnarSquares/Teaser.astro'
import Walkthrough from '~/components/Walkthrough.astro'
---

<h3 id="molnar-squares">
  Vera Molnár &ndash; <em>Untitled (Squares), 1974</em>
</h3>

<div class="sidebar" data-direction="rtl" style="--sidebar-target-width: 400px">
  <div class="prose flow">
    <p>
      In this piece, Molnár draws a series of cascading squares centered on the
      canvas and then offests their centers randomly with in a given bound. Play
      with the value of <code>maxOffset</code> on the sketch to get a sense of how
      the offset affects the drawing.
    </p>
    <p>
      We'll start by first recreating this piece in p5.js using the
      <code>for</code> loop to draw the cascading squares and then add an offset
      with the <code>random</code> function within bounds. Once done, we'll jump
      off and explore variations of this basic pattern with different types of shapes
      and offsets.
    </p>
    <p>
      Start by opening the sketch below in the p5.js editor. Remember to login
      to save your work. A walkthrough of the code is discussed below.
    </p>
    <a
      class="button my-m"
      href="https://editor.p5js.org/ajithranka/sketches/8U-U6vCuR"
      target="_blank">Open sketch in p5.js editor</a
    >
  </div>
  <Teaser />
</div>

<Walkthrough
  code={sketch}
  steps={[
    {lines: [5, 6, 7]},
    {lines: [13, 19], highlights: ['size = 10', 'size < 300', 'size += 10']},
    {lines: [2]},
    {lines: [14, 15]},
    {lines: [18], highlights: ['width/2 + offsetX', 'height/2 + offsetY']}
  ]}
>
  <ol>
    <li>
      We start by setting up a 400 x 400px canvas inside the <code>setup</code> function.
      We make drawing rectangles easier for ourselves by setting
      <code>rectMode</code> to <code>CENTER</code> which moves the anchor point for
      drawing squares from the default top-left to the center. Finally, because we
      want a static drawing, we call <code>noLoop()</code> to stop the
      <code>draw</code> function from being called repeatedly.
    </li>
    <li>
      Inside the <code>draw</code> function, we use a <code>for</code> loop to draw
      squares of increasingly larger <code>size</code>s, starting with 10, upto
      (but less than) 300, and increasing in units of 10.
    </li>
    <li>
      At the beginning of the sketch, we've created a variable called
      <code>maxOffset</code> to control the extent of the random offset we'll apply
      to center of the square.
    </li>
    <li>
      Back again inside the <code>for</code> loop, we calculate x and y offsets using
      the <code>random</code> function, passing it <code>-maxOffset</code> as the
      minimum and <code>+maxOffset</code> as the maximum.
    </li>
    <li>
      At last, we draw the square of side length <code>size</code> using the
      <code>rectangle</code> function, setting the center as the center of the canvas
      <code>(width/2, height/2)</code> but offset by <code>offsetX</code> and
      <code>offsetY</code>.
    </li>
  </ol>
</Walkthrough>

<p>
  The same basic pattern can be applied in different forms to generate
  interesting visual variations. Here's a few ideas for you to try out:
</p>
<div class="grid">
  <figure>
    <img src={imgEqualOffsets.src} alt="" />
    <figcaption>
      Set equal offsets on the center x and y coordinates of the rectangle.
    </figcaption>
  </figure>
  <figure>
    <img src={imgOffsetSides.src} alt="" />
    <figcaption>
      Instead of offsetting the center, try offsetting the rectangle's width and
      height.
    </figcaption>
  </figure>
  <figure>
    <img src={imgCircles.src} alt="" />
    <figcaption>Use other shapes such as circles.</figcaption>
  </figure>
</div>
