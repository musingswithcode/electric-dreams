---
import MainLayout from '~/layouts/MainLayout.astro'
import MolnarSquares from '~/sections/MolnarSquares.astro'
import NeesCubicDisarray from '~/sections/NeesCubicDisarray.astro'
import MolnarDesOrdres from '~/sections/MolnarDesOrdres.astro'
---

<MainLayout>
  <hgroup class="mb-xl">
    <h1 class="text-0">Electric Dreams</h1>
    <h2 class="text-3">Dialogues with the Machine</h2>
  </hgroup>

  <div class="sidebar" data-direction="rtl">
    <div class="prose flow">
      <p>
        Welcome to the workshop! Together, we'll explore some classical pieces
        of generative design, recreate them in code with
        <a href="https://p5js.org/" target="_blank">p5.js</a> (Processing) and, even
        plot them with a
        <a href="https://axidraw.com/" target="_blank">pen plotter</a>. All the
        content we'll cover is below. So if you are more comfortable, feel free
        to explore it at your own pace, otherwise we'll walk through it during
        the workshop.
      </p>

      <p>
        First, we'll start by covering some basics of coding visuals with
        JavaScript and p5.js. Then hand-pick a few examples of generative art
        and recreate them. Broadly, we'll discuss three patterns today, all of
        which can be seen as different lenses for viewing <em>randomness</em>.
      </p>
    </div>
    <ul>
      <li>Language reference</li>
      <li><a href="#randomness-as-offsets">Randomness as offsets</a></li>
      <ul>
        <li><a href="#molnar-squares">Vera Molnár — <em>Squares</em></a></li>
        <li>
          <a href="#nees-cubic-disarray">Georg Nees — <em>Cubic Disarray</em></a
          >
        </li>
      </ul>
      <li><a href="#randomness-as-chance">Randomness as chance</a></li>
      <ul>
        <li>
          <a href="#molnar-des-ordres">
            Vera Molnár — <em>Des Ordres (Grid)</em>
          </a>
        </li>
        <li>Sol LeWitt — <em>Cubes</em></li>
      </ul>
      <li>Randomness as choice</li>
      <ul>
        <li><em>10PRNT()</em></li>
        <li>Sébastien Truchet — <em>Tiling (Triangles)</em></li>
        <li>C S Smith - <em>Tiling (Waves)</em></li>
      </ul>
    </ul>
  </div>

  <h2 id="randomness-as-offsets">Randomness as offsets</h2>

  <p>
    One pattern to use randomness in a generative sketch is to use it as an
    offset on parameters of a shape, such as its position or dimensions. By
    controlling where these offsets are applied or by repeating shapes using
    loops, we can create quite complex patterns.
  </p>
  <p>
    In p5.js, you can call the <code>random</code> function with a minimum and maximum
    value, like so: <code>random(-min, max)</code>. This returns a random value
    between those two bounds.
  </p>

  <MolnarSquares />
  <NeesCubicDisarray />

  <h2 id="randomness-as-chance">Randomness as chance</h2>

  <p>
    The next pattern common in generative sketches is to use randomness as
    probability or chance — kind of like a coin flip. Instead of
    deterministically drawing a shape every time, you can knock off a piece some
    arbitrary percentage of time.
  </p>
  <p>
    Translating to p5.js, the best way to use this pattern is to call the
    <code>random</code> function without any parameters. The default behaviour is
    to return a value between 0 and 1. When used inside a condition like
    <code>random() &lt; 0.5</code>, you can control who often something is
    drawn.
  </p>

  <MolnarDesOrdres />
</MainLayout>
