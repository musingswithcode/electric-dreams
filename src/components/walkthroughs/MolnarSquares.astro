---
import Walkthrough from '~/components/Walkthrough.astro'
import Teaser from './MolnarSquaresTeaser.astro'
import imgMaxOffset10 from './images/molnar-squares-maxoffset-10.png'
import imgMaxOffset20 from './images/molnar-squares-maxoffset-20.png'
import imgMaxOffset30 from './images/molnar-squares-maxoffset-30.png'
import imgEqualOffsets from './images/molnar-squares-equal-offsets.png'
import imgOffsetSides from './images/molnar-squares-offset-sides.png'
import imgCircles from './images/molnar-squares-circles.png'
import sketch from './sketches/molnar-squares.js?raw'
---

<h2>Vera Moln√°r &ndash; <em>Untitled 1974 (Squares)</em></h2>

<div class="sidebar" data-direction="rtl" style="--sidebar-target-width: 400px">
  <div class="prose flow">
    <p>
      One pattern to use randomness in a generative sketch is to use it as an
      offset on parameters of a shape, such as position or their dimensions. In
      p5.js, you can call the <code>random</code> function with a minimum and maximum
      value, like so: <code>random(-min, max)</code>. This returns a random
      value between those two bounds.
    </p>
    <p>
      By controlling where these offsets are applied or by repeating shapes
      using loops, we can create quite complex patterns.
    </p>
    <a
      class="button my-m"
      href="https://editor.p5js.org/ajithranka/sketches/z3y1EU8p"
      target="_blank">Open sketch in p5.js editor</a
    >
  </div>
  <Teaser />
</div>

<h3>Walkthrough</h3>
<Walkthrough
  code={sketch}
  steps={[
    {lines: [5, 6, 7]},
    {lines: [13, 19], highlights: ['size = 10', 'size < 300', 'size += 10']},
    {lines: [2]},
    {lines: [14, 15]},
    {lines: [18], highlights: ['width/2 + offsetX', 'height/2 + offsetY']}
  ]}
>
  <ol>
    <li>
      We start by setting up a 400 x 400px canvas inside the <code>setup</code> function.
      We make drawing rectangles easier for ourselves by setting
      <code>rectMode</code> to <code>CENTER</code> which moves the anchor point for
      drawing squares from the default top-left to the center. Finally, because we
      want a static drawing, we call <code>noLoop()</code> to stop the
      <code>draw</code> function from being called repeatedly.
    </li>
    <li>
      Inside the <code>draw</code> function, we use a <code>for</code> loop to draw
      squares of increasingly larger <code>size</code>s, starting with 10, upto
      (but less than) 300, and increasing in units of 10.
    </li>
    <li>
      At the beginning of the sketch, we've created a variable called
      <code>maxOffset</code> to control the extent of the random offset we'll apply
      to center of the square.
    </li>
    <li>
      Back again inside the <code>for</code> loop, we calculate x and y offsets using
      the <code>random</code> function, passing it <code>-maxOffset</code> as the
      minimum and <code>+maxOffset</code> as the maximum.
    </li>
    <li>
      At last, we draw the square of side length <code>size</code> using the
      <code>rectangle</code> function, setting the center as the center of the canvas
      <code>(width/2, height/2)</code> but offset by <code>offsetX</code> and
      <code>offsetY</code>.
    </li>
  </ol>
</Walkthrough>

<div class="grid my-m">
  <figure>
    <img src={imgMaxOffset10.src} alt="" />
    <figcaption><code>maxOffset = 10</code></figcaption>
  </figure>
  <figure>
    <img src={imgMaxOffset20.src} alt="" />
    <figcaption><code>maxOffset = 20</code></figcaption>
  </figure>
  <figure>
    <img src={imgMaxOffset30.src} alt="" />
    <figcaption><code>maxOffset = 30</code></figcaption>
  </figure>
</div>

<h3>Variations</h3>
<p>
  The same basic pattern can be applied in different forms to generate
  interesting visual variations. Here's a few ideas for you to try:
</p>
<div class="grid">
  <figure>
    <img src={imgEqualOffsets.src} alt="" />
    <figcaption>
      Set equal offsets on the center x and y coordinates of the rectangle.
    </figcaption>
  </figure>
  <figure>
    <img src={imgOffsetSides.src} alt="" />
    <figcaption>
      Instead of offsetting the center, try offsetting the rectangle's width and
      height.
    </figcaption>
  </figure>
  <figure>
    <img src={imgCircles.src} alt="" />
    <figcaption>Use other shapes such as circles.</figcaption>
  </figure>
</div>
